{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nathan\\\\Desktop\\\\CODING\\\\REACT-FULLSTACK\\\\client\\\\src\\\\pages\\\\Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Post() {\n  _s();\n\n  let {\n    id\n  } = useParams();\n  const [postObject, setPostObjetct] = useState({});\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  useEffect(() => {\n    axios.get(`http://localhost:3001/posts/byId/${id}`).then(response => {\n      setPostObjetct(response.data);\n    });\n    axios.get(`http://localhost:3001/comments/${id}`).then(response => {\n      //the url is based on the router that gets the comments (url: '/byId/:id') on file server>routes>Comments.js\n      setComments(response.data);\n    });\n  }, []);\n\n  const addComment = () => {\n    axios.post('http://localhost:3001/comments', {\n      commentBody: newComment,\n      PostId: id\n    }, {\n      headers: {\n        accessToken: sessionStorage.getItem('accessToken') // this is getting the token from the session storage of the browser\n\n      }\n    }).then(response => {\n      if (response.data.error) {\n        alert(response.data.error.message);\n      } else {\n        const commentToAdd = {\n          commentBody: newComment,\n          username: response.data.username\n        };\n        setComments([...comments, commentToAdd]); //adding the new comment to the comments state so that it is displayed right away when we add it\n\n        setNewComment(''); // this will clear the value of the input after commiting the post\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"postPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leftSide\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        id: \"individual\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: postObject.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"body\",\n          children: postObject.postText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer\",\n          children: postObject.username\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rightSide\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"addCommentContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newComment,\n          placeholder: \"Comment...\",\n          onChange: event => {\n            setNewComment(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addComment,\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"listOfComments\",\n        children: comments.map((comment, key) => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comment\",\n            children: [comment.commentBody, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\" Username: \", comment.username, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this)]\n          }, key, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Post, \"DcdHPKZUUEidqRQxCpqkNXD4oyY=\", false, function () {\n  return [useParams];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/Nathan/Desktop/CODING/REACT-FULLSTACK/client/src/pages/Post.js"],"names":["React","useEffect","useState","useParams","axios","Post","id","postObject","setPostObjetct","comments","setComments","newComment","setNewComment","get","then","response","data","addComment","post","commentBody","PostId","headers","accessToken","sessionStorage","getItem","error","alert","message","commentToAdd","username","title","postText","event","target","value","map","comment","key"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nfunction Post() {\r\n  let { id } = useParams();\r\n  const [postObject, setPostObjetct] = useState({});\r\n  const [comments, setComments] = useState([]);\r\n  const [newComment, setNewComment] = useState('');\r\n  useEffect(() => {\r\n    axios.get(`http://localhost:3001/posts/byId/${id}`).then((response) => {\r\n      setPostObjetct(response.data);\r\n    });\r\n\r\n    axios.get(`http://localhost:3001/comments/${id}`).then((response) => {\r\n      //the url is based on the router that gets the comments (url: '/byId/:id') on file server>routes>Comments.js\r\n      setComments(response.data);\r\n    });\r\n  }, []);\r\n\r\n  const addComment = () => {\r\n    axios\r\n      .post(\r\n        'http://localhost:3001/comments',\r\n        {\r\n          commentBody: newComment,\r\n          PostId: id,\r\n        },\r\n        {\r\n          headers: {\r\n            accessToken: sessionStorage.getItem('accessToken'), // this is getting the token from the session storage of the browser\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        if (response.data.error) {\r\n          alert(response.data.error.message);\r\n        } else {\r\n          const commentToAdd = {\r\n            commentBody: newComment,\r\n            username: response.data.username,\r\n          };\r\n          setComments([...comments, commentToAdd]); //adding the new comment to the comments state so that it is displayed right away when we add it\r\n          setNewComment(''); // this will clear the value of the input after commiting the post\r\n        }\r\n      });\r\n  };\r\n  return (\r\n    <div className='postPage'>\r\n      <div className='leftSide'>\r\n        <div className='post' id='individual'>\r\n          <div className='title'>{postObject.title}</div>\r\n          <div className='body'>{postObject.postText}</div>\r\n          <div className='footer'>{postObject.username}</div>\r\n        </div>\r\n      </div>\r\n      <div className='rightSide'>\r\n        <div className='addCommentContainer'>\r\n          <input\r\n            type='text'\r\n            value={newComment}\r\n            placeholder='Comment...'\r\n            onChange={(event) => {\r\n              setNewComment(event.target.value);\r\n            }}\r\n          />\r\n          <button onClick={addComment}>Add Comment</button>\r\n        </div>\r\n        <div className='listOfComments'>\r\n          {comments.map((comment, key) => {\r\n            return (\r\n              <div key={key} className='comment'>\r\n                {comment.commentBody}\r\n                <br />\r\n                <label> Username: {comment.username} </label>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}